# /Users/radiant/Desktop/RXinDexer/docker/postgresql.conf
# This file contains optimized PostgreSQL settings for the RXinDexer blockchain indexer.
# These settings aim to reduce CPU usage while maintaining good performance for blockchain data.

# CONNECTION SETTINGS
listen_addresses = '*'       # Listen on all available interfaces

# MEMORY SETTINGS
# Adjust based on available container memory (using 25% of system RAM as a starting point)
shared_buffers = '1GB'                  # Increase cache size (25% of container RAM)
effective_cache_size = '3GB'            # Estimate of memory available for disk caching
work_mem = '64MB'                       # Per-operation memory for sorts and hash tables
maintenance_work_mem = '256MB'          # For vacuum, index creation
huge_pages = try                        # Use huge pages if available

# WRITE PERFORMANCE
wal_buffers = '16MB'                    # WAL buffer size
synchronous_commit = off                # Async commit for better write performance
checkpoint_timeout = '15min'            # Less frequent checkpoints
checkpoint_completion_target = 0.9      # Spread checkpoints over more time
max_wal_size = '2GB'                    # Increase WAL size to reduce checkpoint frequency

# QUERY OPTIMIZATION
random_page_cost = 1.1                  # Assumes SSD storage
effective_io_concurrency = 200          # Higher for SSDs
max_parallel_workers = 8                # Parallel query workers
max_parallel_workers_per_gather = 4     # Workers per parallel operation
max_worker_processes = 16               # Background workers

# UTXO BALANCE QUERY OPTIMIZATION
hash_mem_multiplier = 2.0               # Improve hash-based aggregations (for GROUP BY)
enable_hashagg = on                     # Use hash aggregation for GROUP BY operations
enable_material = on                    # Enable materialization for subqueries and CTEs
jit = on                                # Just-In-Time compilation for complex queries
jit_above_cost = 100000                 # JIT compilation threshold
work_mem = '128MB'                      # Increased for complex aggregation queries

# AUTOVACUUM SETTINGS
autovacuum = on
autovacuum_max_workers = 6              # More vacuum workers for large DB
autovacuum_vacuum_scale_factor = 0.1    # More aggressive vacuum (10% changed)
autovacuum_analyze_scale_factor = 0.05  # More aggressive analyze (5% changed)

# LOGGING (reduce for production)
log_min_duration_statement = 1000       # Log slow queries (1 second)
log_checkpoints = on
log_autovacuum_min_duration = 1000      # Log slow autovacuum operations

# CONNECTION SETTINGS
max_connections = 100                   # Reduce from default for less overhead
